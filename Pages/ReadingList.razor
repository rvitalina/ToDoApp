@page "/readinglist"

<PageTitle>Список книг</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h1>Список книг</h1>

            @if (todos.Count(item => item.IsDone) == todos.Count)
            {
                <p style="color:green">
                    @todos.Count(item => item.IsDone) прочитано из @todos.Count
                </p>
            }
            else
            {
                <p style="color:darkred">
                    @todos.Count(item => item.IsDone) прочитано из @todos.Count
                </p>
            }

            <p> 

                <h5>Поиск книг по названию</h5>
            </p>

            <div class="row">
                <div class="col">
                    <input class="form-control" @bind-value="@searchTerm" placeholder="Поиск..." />
                </div>

                <div class="col">
                    <button class="btn btn-outline-primary" @onclick="Search">
                        <i class="oi oi-magnifying-glass"></i>
                    </button>
                </div>
            </div>

            <p>

            </p>

            <table class="table table-striped table-bordered table-hover rounded ">
                <thead class="table-info"> 
                    <tr>
                        <th scope="col">Название</th>
                        <th scope="col">Статус</th>
                        <th scope="col">
                            Дата создания
                            <button class="btn btn-link" @onclick="SortByCreationDateAscending">
                                <i class="oi oi-sort-ascending"></i>
                            </button>
                            <button class="btn btn-link" @onclick="SortByCreationDateDescending">
                                <i class="oi oi-sort-descending"></i>
                            </button>    
                        </th>
                        <th scope="col">Важность</th>
                        <th scope="col">Действия</th>
                    </tr>
                </thead>

                @foreach (var item in todos)
                {
                    <tbody>
                        <tr>
                            <td>
                                <div style="@(item.IsDone ? "color: green; text-decoration: line-through;": "color: red")">
                                    @item.Title
                                </div>
                            </td>

                            <td style="text-align: center;">
                                <input type="checkbox" @bind="item.IsDone"/>
                            </td>

                            <td style="text-align: center;">
                                @item.CreationDate.ToString("dd/MM/yyyy HH:mm")
                            </td>

                            <td style="text-align: center;">
                                <input type="checkbox" id="star-checkbox" @bind="item.IsImportant">
                                <label for="star-checkbox"></label>
                            </td>

                            <td style="text-align: center;">
                                <button class="edit-button" @onclick="() => ShowEditModal(item)">
                                    <i class="oi oi-pencil"></i>
                                </button>

                                <button class="remove-button" @onclick="() => RemoveItem(item)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>    

            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder="Введите название книги..." @bind="newTitle"/>
                </div>

                <div class="col">
                    <button class="btn btn-success" @onclick="AddItem">
                        <i class="oi oi-arrow-thick-top"></i>
                    </button>
                </div>
            </div>

            <div>
                <button class="btn btn-primary align-right" @onclick="() => SaveTasksToFile(sourceFile)">
                    Сохранить 
                    <i class="oi oi-file"></i>
                </button>
            </div>

        </div>
    </div>
</div>

@if (searchResults != null)
{
        <div class="modal">
            <div class="modal-content wide-modal-content">
                <div class="modal-header">
                    <h3>Результаты поиска</h3>
                    <button class="close-button" @onclick="CloseSearchResults">×</button>
                </div>

                <p>

                    <h5>Найдено @searchResults.Count книг</h5>

                </p>
                @if (searchResults.Count > 0)
                {
                    <table>
                        <thead class="table-bordered">
                            <tr>
                                <th>Название</th>
                                <th>Статус</th>
                                <th>Дата создания</th>
                                <th>Важность</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var foundItem in searchResults)
                            {
                                <tr>
                                    <td>@foundItem.Title</td>
                                    <td style="text-align: center;">
                                        <input type="checkbox" @bind="foundItem.IsDone" />
                                    </td>
                                <td style="text-align: center;">@foundItem.CreationDate.ToShortDateString()</td>
                                <td style="text-align: center;">
                                    <input type="checkbox" id="star-checkbox" @bind="foundItem.IsImportant">
                                    <label for="star-checkbox"></label>
                                </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
}


@if (editedItem != null)
{
            <div class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4>Редактирование</h4>
                    </div>

                    <p>

                    </p>

                    <input type="text" @bind-value="@editedItem.Title" />

                    <p>

                    </p>

                    <div class="modal-buttons">
                        <button class="modal-button" @onclick="SaveItem">Сохранить</button>
                    </div>
                </div>
            </div>
}

@code {
    private List<ToDoItem> todos = LoadTasksFromFile(sourceFile);
    private List<ToDoItem> searchResults;
    private ToDoItem editedItem;
    private string newTitle;
    private string searchTerm;

    private const string sourceFile = "ReadingList.txt";

    private void AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newTitle))
        {
            todos.Add(new ToDoItem { Title = newTitle, CreationDate = DateTime.Now });
            newTitle = string.Empty;
        }
        else
        {
            newTitle = string.Empty;
        }
    }

    private void ShowEditModal(ToDoItem item)
    {
        editedItem = item;
    }

    private void SaveItem()
    {
        if (!string.IsNullOrWhiteSpace(editedItem.Title))
        {
            editedItem = null;
        }
        else
        {
            editedItem.Title = string.Empty;
        }

    }

    private void RemoveItem(ToDoItem deletedItem)
    {
        todos.Remove(deletedItem);
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            searchTerm = string.Empty;
        }
        else
        {
            searchResults = todos.Where(item => item.Title.Contains(searchTerm)).ToList();
        }
    }

    private void CloseSearchResults()
    {
        searchResults = null;
        searchTerm = "";
    }

    private void SortByCreationDateAscending()
    {
        todos.Sort((item1, item2) => item1.CreationDate.CompareTo(item2.CreationDate));
    }

    private void SortByCreationDateDescending()
    {
        todos.Sort((item1, item2) => item2.CreationDate.CompareTo(item1.CreationDate));
    }

    private void SaveTasksToFile(string filePath)
    {
        using (StreamWriter writer = new StreamWriter(filePath, false))
        {
            foreach (var item in todos)
            {
                writer.WriteLine($"{item.Title}|{item.IsDone}|{item.CreationDate}|{item.IsImportant}");
            }
        }
    }

    private static List<ToDoItem> LoadTasksFromFile(string filePath)
    {
        List<ToDoItem> books = new List<ToDoItem>();

        if (File.Exists(filePath))
        {
            using (StreamReader reader = new StreamReader(filePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    string[] fields = line.Split('|');

                    ToDoItem task = new ToDoItem();
                    task.Title = fields[0];
                    task.IsDone = bool.Parse(fields[1]);
                    task.CreationDate = DateTime.Parse(fields[2]);
                    task.IsImportant = bool.Parse(fields[3]);

                    books.Add(task);
                }
            }
        }

        return books;
    }
}
